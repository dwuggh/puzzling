#+TITLE: the Puzzling Project
* about
  - a rubik's cube simulator
  - a platform for cubes and puzzles
  [[./proto1.png]]
* purpose
  - for fun
  - learn how to develop a software from scratch
  - get familiar with modern designing mode
  - learn Computer Graphics
  - teamwork with git
* structure
  - Vue's mode(MVVM)
* technology stack
** vue.js
   - a modern front-end framework
   - easy to learn and use(relatively)
   - vue CLI
** electron
   - use vue-electron package
   - electron is not the main focus
** webGL
*** three.js
    - easy to learn
    - plenty of tutorials, both english and chinese
    - offical chinese document(for some reason it's hided recently, but still can be found)
*** base webGL(2)
    - (relatively) hard to learn
    - more flexible
** SQL
   - we may have to write our own database engine
   - database designing
   - mySQL, sqlite, etc
* code style
** eslint
   - need discussion
   - semicolon
   - tab width
   - parentheses problems
** DRY --Don't Repeat Yourself
   - highly reusable API
   - good abstraction
* comments and documents
** need good advice
* version control & package management
** git
   - [[https://github.com/dwuggh/puzzling][github]]
   - [[https://git.ustc.edu.cn/dwuggh/puzzling][gitlab]]
** npm
** test
   - not so sure how to deploy tests
   - gitlab
   - travis
* platform
  - linux
  - macOS
  - windows
* license
  - need discussion
  - GPLv3
  - LGPL
* IDEs
  - webstorm (edu license)
  - vscode
  - emacs/vim
* some fantasy
** typescript?
   - better language
   - better OOP support
   - I'm not familiar with typescript, but since three.js and vue both have ts support, we may give it a try.
** refactor to C++ on Qt platform?
*** pros:
    - better language
    - better OOP support
    - faster
    - more flexible(mainly because I'm more familiar with openGL)
*** cons:
    - less extensibility
    - node.js is modernized and it is the future trend
    - much more code, especially openGL
** is vue necessary?
   - perhaps not, but we could try it first
